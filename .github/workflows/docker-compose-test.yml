name: docker-compose-test

on:
  workflow_call:
  push:
    branches:
      - '*'
      - '!deploy'
      - '!gh-pages'

permissions:
  contents: read

jobs:
  docker-compose-tests:
    # this has a chance of infinite loop if we write a test wrong, timeout should catch it eventually.
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Set up Docker layer caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize .docker.env
        run: |
          echo "DB_USER=test_user" > .docker.env
          echo "DB_PASS=test" >> .docker.env
          echo "DB_NAME=test" >> .docker.env
          echo "DB_PORT=5432" >> .docker.env
          echo "SECRET_OAUTH2_CLIENT_ID=1234567890" >> .docker.env
          echo "PUBLIC_APP_NAME=test" >> .docker.env
          echo "SECRET_OAUTH2_CLIENT_SECRET=1234567890" >> .docker.env
          echo "PUBLIC_APP_NAME=test" >> .docker.env
          echo "REDIS_NAME=some_name" >> .docker.env
          echo "REDIS_URL=redis://redis:6379" >> .docker.env
          echo "ENVIRONMENT=test" >> .docker.env
          echo "PORT=3000" >> .docker.env
          cp .docker.env .env
          echo "DB_HOST=db" >> .docker.env

      - name: Start Docker build in background
        run: |
          # Build with cache and faster parallel builds
          DOCKER_BUILDKIT=1 docker buildx build \
            --target production \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            -t test_app:latest . &

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v22.12.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install Dependencies
        run: pnpm i

      - name: Set up Postgres
        run: |
          docker compose --project-name test up -d db
          docker exec db bash -c '
            for i in $(seq 1 15); do
              pg_isready -U admin && exit 0
              sleep 1
            done
            echo "Postgres did not become ready in time" >&2
            exit 1
          '
          docker exec db psql -U admin -c "CREATE ROLE test_user WITH LOGIN PASSWORD 'test';"
          docker exec db psql -U admin -c "CREATE DATABASE test WITH OWNER test_user;"
          docker exec db psql -U admin -c "GRANT admin TO test_user;"

          cp .env .cp
          echo "DB_HOST=localhost" >> .env

          pnpm db:migrate
          pnpm db:push --force

          rm .env
          cp .cp .env
          rm .cp
          echo "DB_HOST=db" >> .env

      - name: Wait for build to finish
        run: |
          wait
          # Move cache to avoid growing cache size
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Start App
        run: |
          # Use the pre-built image in docker-compose
          docker tag test_app:latest test_app:production
          docker compose --project-name test up -d app redis
          pnpm test:integration

      - name: Stop Application
        run: docker compose --project-name test down -v
